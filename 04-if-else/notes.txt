## ways to convert string to int 

To convert a Python string to an integer, you have a couple of options:

1. **Using the `int()` Function:**
   If you have a decimal integer represented as a string and you want to convert it to an integer, you can use the `int()` function. Simply pass the string to `int()`, and it will return the corresponding decimal integer. For example:
   ```python
   my_string = "10"
   my_integer = int(my_string)
   print(my_integer)  # Output: 10
   ```

2. **Using String Formatting with `%s`:**
   You can also use string formatting to insert an integer into a string. The `%s` conversion specifier represents a string. Here's an example:
   ```python
   my_integer = 42
   my_string = "%s" % my_integer
   print(my_string)  # Output: "42"
   ```

Remember that the `int()` function directly converts a string to an integer, while string formatting allows you to customize how the integer is inserted into a string.


## using f string to convert int to string 

Certainly! In Python, you can use **f-strings** (formatted string literals) to insert an integer into a string. F-strings provide a concise and readable way to format strings with expressions. Here's how you can use them for integer formatting:

```python
my_integer = 42
my_string = f"{my_integer}"
print(my_string)  # Output: "42"
```


##  "{}".format()

In Python, the `"{}".format()` method is used to format and insert values into a string.

1. **Placeholder Syntax:**
   - The format method uses curly braces `{}` as placeholders inside a string.
   - You can include one or more placeholders in your string, and they will be replaced with actual values when you call the `format()` method.

2. **Value Insertion:**
   - You provide the values to be inserted as arguments to the `format()` method.
   - These values can be:
     - A list of values separated by commas.
     - A key-value list (where keys correspond to named placeholders).
     - A combination of both.

3. **Examples:**
   - Using named placeholders:
     ```python
     txt1 = "My name is {fname}, I'm {age}".format(fname="John", age=36)
     ```
   - Using numbered placeholders:
     ```python
     txt2 = "My name is {0}, I'm {1}".format("John", 36)
     ```
   - Using empty placeholders (order matters):
     ```python
     txt3 = "My name is {}, I'm {}".format("John", 36)
     ```


5. **Return Value:**
   - The `format()` method returns the formatted string.

## enumerate()

Certainly! Let's explore how to iterate through a Python dictionary using the `enumerate()` function. This function is particularly useful for accessing both the keys and values of a dictionary along with their corresponding indices. I'll provide a few examples to illustrate its usage:

1. **Basic Iteration with `enumerate()`**:
   In this example, we'll use the `items()` method of the dictionary to get key-value pairs. The `enumerate()` function will then allow us to loop through these pairs, unpacking each one into variables `key` and `value`, while keeping track of the iteration index. Here's the code:

    ```python
    sample_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}
    for index, (key, value) in enumerate(sample_dict.items()):
        print(f"Index: {index}, Key: {key}, Value: {value}")
    ```

    Output:
    ```
    Index: 0, Key: a, Value: 1
    Index: 1, Key: b, Value: 2
    Index: 2, Key: c, Value: 3
    Index: 3, Key: d, Value: 4
    ```

2. **Enumerating with a Custom Start Index**:
   You can specify a custom starting value for the index using the `start` argument. For example, if you want indexing to begin from 1 (instead of the default 0), you can set `start=1`. Here's an example:

    ```python
    grades = {'Alice': 90, 'Bob': 85, 'Charlie': 92, 'David': 78}
    for position, (student, score) in enumerate(grades.items(), start=1):
        print(f"Position: {position}, Student: {student}, Score: {score}")
    ```

    Output:
    ```
    Position: 1, Student: Alice, Score: 90
    Position: 2, Student: Bob, Score: 85
    Position: 3, Student: Charlie, Score: 92
    Position: 4, Student: David, Score: 78
    ```

3. **Filtering Dictionary Elements During Iteration**:
   You can combine `enumerate()` with other Python features to perform more complex operations during iteration. In this example, we use a generator expression within `enumerate()` to filter dictionary elements based on a condition (e.g., population greater than 3 million):

    ```python
    population = {'New York': 8398748, 'Los Angeles': 3980400, 'Chicago': 2716000, 'Houston': 2328000}
    for city, pop in enumerate((city, pop) for city, pop in population.items() if pop > 3000000):
        print(f"City: {city}, Population: {pop}")
    ```

    Output:
    ```
    City: 0, Population: ('New York', 8398748)
    City: 1, Population: ('Los Angeles', 3980400)
    ```

1.The enumerate function in python is a built-in function that returns an enumerate object, which is an iterator that yields pairs of index and value for each item in a sequence.
2.The enumerate function takes a sequence as an argument, such as a list, a tuple, a string, or a range object, and optionally a start value for the index, which defaults to 0.
3.The enumerate function can be used with a for loop to iterate over the sequence with both index and value available in each iteration.
4.The for loop uses unpacking syntax to assign the index and value to two variables, which can be named as desired.
5.The print function is used to display the index and value in each iteration.
