# dict[key_name] vs dict.get[key_name]

dict_name[key_name]: This is the standard method of accessing the value for a given key_name in the dictionary. 
                     If the key is present in the dictionary, it will return the value associated with that key. 
                     However, if the key is not found, it will raise a KeyError.

dict_name.get(key_name): The get method is a safer alternative to the standard method. 
                         It allows you to access the value associated with key_name, but if the key is not found, 
                         it will return None instead of raising an error. You can also provide a default value that 
                         will be returned if the key is not found, like this: dict_name.get(key_name, default_value).

 
# .add vs .append

1. **`append`**:
    - **Used with Lists**: The `append()` method is specifically used with **lists**.
    - **Functionality**: It adds an element to the **end** of a list.
    - **In-Place Modification**: The original list is **modified in place** (i.e., it is updated directly).
    - **Return Value**: The `append()` method **does not return a new list**; it simply modifies the existing one.
    - **Time Complexity**: The time complexity of `append()` is **constant** ($$O(1)$$), regardless of the list's size.
- **Example**:
```python
my_list = [1, 2, 3]
my_list.append(4)
# Result: [1, 2, 3, 4] ```
2. **`add`**:
    - **Used with Sets**: The `add()` method is used with **sets**.
    - **Functionality**: It inserts a **single element** into a set.
    - **Uniqueness**: Sets do not allow duplicates, so the `add()` method ensures **uniqueness**.
    - **In-Place Modification**: The original set is **modified in place**.
    - **Return Value**: The `add()` method **does not return a new set**; it updates the existing one.
    - **Time Complexity**: The time complexity of `add()` is also **constant** ($$O(1)$$).
- **Example**:
      ```python
      my_set = {'a', 'b'}
      my_set.add('c')
      # Result: {'a', 'b', 'c'}
      ```
In summary:
 - Use `append()` for lists to add elements to the end.
 - Use `add()` for sets to insert unique elements.
 - Remember that the `+` operator (used for concatenation) is different from both `append()` and `add()`.

 #set

Certainly! Let's use more complex examples to illustrate each of the set functions in Python:

1. **`add(element)`**:
    - Adds an element to the set.
    ```python
    prime_numbers = {2, 3, 5, 7, 11, 13}
    prime_numbers.add(17)
    print(prime_numbers)  # Output: {2, 3, 5, 7, 11, 13, 17}
    ```

2. **`clear()`**:
    - Removes all elements from the set.
    ```python
    prime_numbers.clear()
    print(prime_numbers)  # Output: set()
    ```

3. **`copy()`**:
    - Returns a copy of the set.
    ```python
    fibonacci_numbers = {0, 1, 1, 2, 3, 5, 8, 13, 21, 34}
    fibonacci_copy = fibonacci_numbers.copy()
    print(fibonacci_copy)  # Output: {0, 1, 2, 3, 5, 8, 13, 21, 34}
    ```

4. **`difference(other_set)`**:
    - Returns a set containing the difference between two sets.
    ```python
    squares = {x**2 for x in range(10)}
    evens = {x for x in range(10) if x % 2 == 0}
    odd_squares = squares.difference(evens)
    print(odd_squares)  # Output: {1, 9, 25, 49, 81}
    ```

5. **`intersection(other_set)`**:
    - Returns a set with elements common to both sets.
    ```python
    multiples_of_3 = {x for x in range(30) if x % 3 == 0}
    multiples_of_5 = {x for x in range(30) if x % 5 == 0}
    common_multiples = multiples_of_3.intersection(multiples_of_5)
    print(common_multiples)  # Output: {0, 15}
    ```

6. **`discard(element)`**:
    - Removes the specified item from the set (if present).
    ```python
    chars_in_string = set("Hello World")
    chars_in_string.discard(' ')
    print(chars_in_string)  # Output: {'d', 'e', 'H', 'l', 'o', 'r', 'W'}
    ```

7. **`isdisjoint(other_set)`**:
    - Checks if two sets have any intersection.
    ```python
    vowels = set('aeiou')
    consonants = set('bcdfghjklmnpqrstvwxyz')
    print(vowels.isdisjoint(consonants))  # Output: True
    ```

8. **`issubset(other_set)`**:
    - Checks if this set is a subset of another set.
    ```python
    A = {1, 2, 3}
    B = {1, 2, 3, 4, 5}
    print(A.issubset(B))  # Output: True
    ```

9. **`issuperset(other_set)`**:
    - Checks if this set is a superset of another set.
    ```python
    print(B.issuperset(A))  # Output: True
    ```

10. **`pop()`**:
    - Removes and returns an arbitrary element from the set.
    ```python
    random_element = fibonacci_numbers.pop()
    print(random_element)
    print(fibonacci_numbers)
    ```

11. **`remove(element)`**:
    - Removes the specified element from the set (raises an error if not found).
    ```python
    chars_in_string.remove('H')
    print(chars_in_string)  # Output: {'d', 'e', 'l', 'o', 'r', 'W'}
    ```

12. **`symmetric_difference(other_set)`**:
    - Returns a set with symmetric differences.
    ```python
    even_numbers = {x for x in range(10) if x % 2 == 0}
    prime_numbers = {2, 3, 5, 7}
    symmetric_diff = even_numbers.symmetric_difference(prime_numbers)
    print(symmetric_diff)  # Output: {0, 1, 3, 4, 5, 6, 7, 8}
    ```

13. **`union(other_set)`**:
    - Returns a set containing the union of sets.
    ```python
    union_set = even_numbers.union(prime_numbers)
    print(union_set)  # Output: {0, 1, 2, 3, 4, 5, 6, 7, 8}
    ```

14. **`update(other_set)`**:
    - Updates the set with the union of this set and others.
    ```python
    even_numbers.update({-2, -4, -6})
    print(even_numbers)  # Output: {0, 2, 4, 6, 8, -6, -4, -2}
    ```

## list_1 = list_2[:] will create a deep copy
